from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from pydantic import BaseModel, Field, validator
from sqlalchemy.exc import IntegrityError

from models import DiscountGroup, Discount, get_db
from utils.auth import verify_admin

router = APIRouter(
    prefix="/discounts",
    tags=["Discounts"],
    responses={
        401: {"description": "Not authenticated"},
        403: {"description": "Not authorized"},
        404: {"description": "Not found"},
        422: {"description": "Validation error"}
    }
)

class DiscountCreate(BaseModel):
    """Discount creation model. ID is auto-generated by the backend."""
    name: str = Field(..., min_length=1, description="Name of the discount")
    amount: float = Field(..., description="Positive for percentage, negative for flat amount")
    is_percentage: bool = Field(..., description="True if percentage, False if flat amount")
    sort_order: int = Field(default=0, ge=0, description="Display order (lower numbers first)")
    available: bool = Field(default=True, description="Whether this discount is available")

    @validator('amount')
    def validate_amount(cls, v, values):
        if 'is_percentage' in values:
            if values['is_percentage'] and (v <= 0 or v > 100):
                raise ValueError('Percentage discount must be between 0 and 100')
            elif not values['is_percentage'] and v >= 0:
                raise ValueError('Flat amount discount must be negative')
        return v

    class Config:
        json_schema_extra = {
            "example": {
                "name": "Happy Hour",
                "amount": 15.0,
                "is_percentage": True,
                "sort_order": 1,
                "available": True
            }
        }

class DiscountUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1)
    amount: Optional[float] = None
    is_percentage: Optional[bool] = None
    sort_order: Optional[int] = Field(None, ge=0)
    available: Optional[bool] = None

    @validator('amount')
    def validate_amount(cls, v, values):
        if v is not None and 'is_percentage' in values:
            if values['is_percentage'] and (v <= 0 or v > 100):
                raise ValueError('Percentage discount must be between 0 and 100')
            elif not values['is_percentage'] and v >= 0:
                raise ValueError('Flat amount discount must be negative')
        return v

class DiscountGroupCreate(BaseModel):
    """Discount group creation model. ID is auto-generated by the backend."""
    name: str = Field(..., min_length=1, description="Name of the discount group")
    sort_order: int = Field(default=0, ge=0, description="Display order (lower numbers first)")
    available: bool = Field(default=True, description="Whether this discount group is available")

    class Config:
        json_schema_extra = {
            "example": {
                "name": "Special Offers",
                "sort_order": 1,
                "available": True
            }
        }

@router.get(
    "",
    response_model=dict,
    summary="Get Discount Group",
    response_description="Complete discount group structure"
)
async def get_discounts(db: Session = Depends(get_db)):
    """Get the discount group and all its discounts"""
    group = db.query(DiscountGroup).first()
    if not group:
        # Create default discount group if it doesn't exist
        group = DiscountGroup(
            name="Discounts",
            discount_group_id=999999,
            available=True,
            sort_order=0
        )
        db.add(group)
        db.commit()
        db.refresh(group)
    
    return {
        "discount_group": [group.to_dict()]
    }

@router.patch(
    "/group",
    response_model=dict,
    dependencies=[Depends(verify_admin)],
    summary="Update Discount Group",
    response_description="Updated discount group"
)
async def update_discount_group(
    available: bool,
    db: Session = Depends(get_db)
):
    """Update the discount group availability"""
    group = db.query(DiscountGroup).first()
    if not group:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Discount group not found"
        )
    
    group.available = available
    db.commit()
    db.refresh(group)
    
    return {
        "discount_group": [group.to_dict()]
    }

@router.post(
    "/groups",
    response_model=dict,
    summary="Create Discount Group",
    response_description="Created discount group details with auto-generated ID"
)
async def create_discount_group(
    group_data: DiscountGroupCreate,
    db: Session = Depends(get_db)
):
    """
    Create a new discount group.
    
    The group ID will be auto-generated by the backend.
    """
    group = DiscountGroup(
        name=group_data.name,
        sort_order=group_data.sort_order,
        available=group_data.available
    )
    
    db.add(group)
    db.commit()
    db.refresh(group)
    
    return group.to_dict()

@router.post(
    "",
    response_model=dict,
    summary="Create Discount",
    response_description="Created discount details with auto-generated ID"
)
async def create_discount(
    discount_data: DiscountCreate,
    group_id: int = Query(..., description="ID of the discount group to add this discount to"),
    db: Session = Depends(get_db)
):
    """
    Create a new discount.
    
    The discount ID will be auto-generated by the backend.
    The discount must be associated with an existing discount group.
    """
    group = db.query(DiscountGroup).filter(DiscountGroup.id == group_id).first()
    if not group:
        raise HTTPException(status_code=404, detail="Discount group not found")
    
    discount = Discount(
        group_id=group_id,
        name=discount_data.name,
        amount=discount_data.amount,
        is_percentage=discount_data.is_percentage,
        sort_order=discount_data.sort_order,
        available=discount_data.available
    )
    
    db.add(discount)
    db.commit()
    db.refresh(discount)
    
    return discount.to_dict()

@router.patch(
    "/{discount_id}",
    response_model=dict,
    dependencies=[Depends(verify_admin)],
    summary="Update Discount",
    response_description="Updated discount group"
)
async def update_discount(
    discount_id: int,
    discount_data: DiscountUpdate,
    db: Session = Depends(get_db)
):
    """Update a discount"""
    discount = db.query(Discount).filter(Discount.id == discount_id).first()
    if not discount:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Discount not found"
        )
    
    try:
        # Update only provided fields
        if discount_data.name is not None:
            discount.name = discount_data.name
        if discount_data.amount is not None:
            discount.amount = discount_data.amount
        if discount_data.is_percentage is not None:
            discount.is_percentage = discount_data.is_percentage
        if discount_data.sort_order is not None:
            discount.sort_order = discount_data.sort_order
        if discount_data.available is not None:
            discount.available = discount_data.available
        
        db.commit()
        db.refresh(discount)
        
        # Return updated group structure
        return {
            "discount_group": [discount.group.to_dict()]
        }
    except IntegrityError:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Failed to update discount"
        )

@router.delete(
    "/{discount_id}",
    response_model=dict,
    dependencies=[Depends(verify_admin)],
    summary="Delete Discount",
    response_description="Updated discount group after deletion"
)
async def delete_discount(
    discount_id: int,
    db: Session = Depends(get_db)
):
    """Delete a discount"""
    discount = db.query(Discount).filter(Discount.id == discount_id).first()
    if not discount:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Discount not found"
        )
    
    group = discount.group
    
    try:
        db.delete(discount)
        db.commit()
        
        # Return updated group structure
        return {
            "discount_group": [group.to_dict()]
        }
    except IntegrityError:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Cannot delete discount with existing records"
        ) 